GIT : Global Information Tracker

SCM : Source Code Management 
VCS : Version Control System

WHY GIT: 
--------
-->to store each version of code seperately.

Purpose: To RollBack

Rollback means Going back to previous version of the application.
V2 < -- v3

GIT:
----
--> Git is used to track the files.
--> It will maintain multiple versions of the same file.
--> It is platform-independent.
--> It is free and open-source.
--> They can handle larger projects efficiently.
--> It is 3rd generation of vcs.
--> It is written on c programming
--> It came on the year 2005


V1 : INDEX.HTML = 10 lines
V2 : INDEX.HTML = 20 lines
V3 : INDEX.HTML = 30 lines


CVCS : Centralized Version Control System
-----------------------------------------
--> We can store source code on single repository.
Ex: svn

DVCS : Distributed Version Control System
-----------------------------------------
--> We can store source code on multiple repositories.
Ex: git


STAGES OF GIT:
--------------
1. Working Directory   : where we write the code
2. Staging Area        : where we track the code
3. Repository          : where we store the tracked code.


PRACTICAL PART:
---------------
1. Create a server and login to it.

sudo -i
mkdir paytm
cd paytm

yum install git -y
git init    (without .git we cant run git commands)

touch index.html	: to create a file
git status		: to check status of a file
git add index.html	: to track the file
git commit -m "commit-1" index.html : to commit the file

git log			: to show commits history
git log	--oneline	: to show commits history in single line
git log	--oneline -2	: to show last 2 commits history
git show commit_id	: to show which file is commited for this id.


USER CONFIGURATION:
-------------------
--> By default all the commits will come with root user
--> So we need to change the username as per our requirment

git config user.name "raham"
git config user.email "raham@gmail.com"


GIT RESTORE:
------------
--> This command will untrack the tracked file.

git restore --staged file_name
git rm --cached raham (alternative command)

--> This command used to recover the deleted file.
git restore file_name

GIT STASH:
----------
--> To hide the tracked files for temperory purpose.

touch file1
git add file

git stash	: to stash the file
git stash apply	: to unstash the file
git stash list	: to list the stashes
git stash clear	: to delete the stashes


DAY: 29-04-2024 :


BRANCHES:
---------
--> It's an individual line of development for code.
--> We create different branches in real-time.
--> Each developer will work on their own branch.
--> At the end we will combine all branches together.
--> Default branch is Master.

git branch		: to list the branches
git branch movies	: to create a new branch
git checkout movies	: to switch from one branch to another.
git checkout -b recharge: to create and switch from one branch to another.
git branch -m old new	: to rename a branch
git branch -D movies	: to delete a branch

--> We cant delete the current branch

PROCESS:
--------

git branch		
git branch movies	
git checkout movies
touch movies{1..5}
git status
git add movies*
git commit -m "dev-1 commits" movies*

git branch dth	
git checkout dth
touch dth{1..5}
git status
git add dth*
git commit -m "dev-2 commits" dth*

git checkout -b train
touch train{1..5}
git add train*
git commit -m "dev-3 commits" train*

git checkout -b recharge
touch recharge{1..5}
git add recharge*
git commit -m "dev-4 commits" recharge*


NOTE : Here every dev works on the local laptop
at the end we want all dev codes to create an application.
so here we use GitHub to combine all dev codes together.

--> Create a GitHub account and create Repo 

--> To connect with local repository to git hub we need to use this command.

    git remote add origin https://github.com/revathisiriki78/paytm.git

    git push origin movies

    username: saibootla
    password: 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

NOTE : In github passwords are not accepted we need to use token.

profile -- > settings -- > developer settings -- > Personal access token -- > classic -- > 
generate new token -- > classic -- > name: paytm -- > select 6 scopes -- > generate 

git push origin dth
username:
password:

git push origin train
username:
password:

git push origin recharge
username:
password:

=================================================================

GIT CLONE:
----------
--> It download code from github(Remote) to git(Local).

git clone https://github.com/anitalluri00/paytm.git


GIT FORK:
---------
--> It download code from github account to another github account.

--> For git clone and git fork repos must be public.


GIT MERGE:
---------- 
--> It will merge files between two different branches.

git checkout master
git merge movies
git merge train


GIT REBASE:
-----------
--> Used to add files blw two different branches.

git checkout master
git rebase train
git rebase recharge


MERGE VS REBASE:
----------------
--> Merge for public repos, Rebase for private 
--> Merge stores history, Rebase will not store the entire history
--> Merge will show files, Rebase will not show files

PULL REQUEST (PR) : in GitHub we use Pull Request (PR) to do merging.


GIT REVERT:
-----------
--> Used to revert(get back) the files we merge.

git revert dth
git revert recharge


======================================================

GIT PULL:
---------
--> Used to get the changed files from github to git.

git pull origin master

GIT FETCH:
----------
--> Used to show the changed files from github to git.

git fetch

CHERRY-PICK:
------------
--> Merging the specific files based on commits.

git cherry-pick commit_id

Process:

mkdir raham
cd raham/
touch java{1..3}
git init
git add java*
git commit -m "java-commits" java*

git branch
git checkout -b branch1
touch python{1..5}
git add python*
git commit -m "python commits" python*

touch php{1..5}
git add php*
git commit -m "php commits" php*

touch donet{1..5}
git add donet*
git commit -m "dontent commits" donet*

git log --oneline
git checkout master
ll
git cherry-pick commit_id_of python
ll
git cherry-pick commit_id_of php


MERGE CONFLICTS:
----------------
--> It will rise when we merge 2 different branches with same files.
--> How to resolve: Manually 

vim index.html
im dev-1 writing java on branch-1
git add index.html
git commit -m "dev-1 commits" index.html
git branch -m master branch1

git checkout -b branch2
vim index.html
im dev-2 writing index.html on branch-2
git add index.html
git commit -m "dev-2 commits" index.html

vim index.html
im dev-1 writing index.html on branch-1
new line
git add index.html
git commit -m "dev-1 2nd commits" index.html
git merge branch2

vim index.html
git add index.html
git commit -m "merge commits"


.gitignore :
------------
--> This file will ignore the files of being tracked.
--> If you write any filename on this .gitingore it wont track that file.

vim .gitignore
Enter the files which you don't want to track.

NOTE : . should be mandatory


GIT RESET:
----------
--> To undo the commits.

LONG LIVING BRANCHES  : These branches we wont delete and we use them frequently.
EX: Master, Main, ---

SHORT LIVING BRANCHES : These branches we will delete and we dont use them frequently.
EX: release, bugfix, --------

========================================================